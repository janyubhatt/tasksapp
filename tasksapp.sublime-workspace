{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"validate",
				"validateFields"
			],
			[
				"err",
				"errors"
			],
			[
				"mat",
				"matchingUsers"
			],
			[
				"user",
				"userSearch"
			],
			[
				"check",
				"checkPassword"
			],
			[
				"tema",
				"template_values"
			],
			[
				"pas",
				"password"
			],
			[
				"password",
				"password"
			],
			[
				"username",
				"username"
			],
			[
				"verif",
				"verifyPass"
			],
			[
				"temp",
				"template_values"
			],
			[
				"valida",
				"validation"
			],
			[
				"vali",
				"validation"
			],
			[
				"error",
				"error_username"
			],
			[
				"bas",
				"BaseHandler"
			],
			[
				"erro",
				"error_username"
			],
			[
				"template",
				"template_values"
			],
			[
				"font",
				"font-size"
			],
			[
				"pad",
				"padding-top"
			],
			[
				"li",
				"list-style-type"
			],
			[
				"padding",
				"padding-left"
			],
			[
				"list-ty",
				"list-style-image"
			],
			[
				"marg",
				"margin-right"
			],
			[
				"di",
				"display"
			],
			[
				"b",
				"text-bottom"
			],
			[
				"al",
				"text-align"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"in",
				"inline"
			],
			[
				"ma",
				"main-content"
			],
			[
				"fo",
				"font-size"
			],
			[
				"align",
				"vertical-align"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"inl",
				"inline-block"
			],
			[
				"l",
				"li	Tag"
			],
			[
				"hea",
				"header	Tag"
			],
			[
				"he",
				"header	Tag"
			],
			[
				"height",
				"height"
			],
			[
				"bac",
				"background-color"
			],
			[
				"ba",
				"background-color"
			],
			[
				"Base",
				"BaseHandler"
			],
			[
				"matc",
				"matchingPass"
			],
			[
				"re",
				"RequestHandler"
			],
			[
				"user_id",
				"user_id_hash"
			],
			[
				"vis",
				"visit_cookie_str"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python\n#\n# Copyright 2007 Google Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\nimport webapp2\nimport jinja2\nimport os\nimport re\nimport user\nimport hashlib\nimport hmac\nimport string\nimport utils\n#Initializes templating features of Jinja2 framework\ntemplate_dir = os.path.join(os.path.dirname(__file__))\njinja_environment = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),\n                               autoescape = True)\n\n\n#Base handler contains basic templating functions \nclass BaseHandler(webapp2.RequestHandler):\n    # Writes string  \n    def write(self, *a, **kw):\n        self.response.out.write(*a, **kw)\n        \n    #returns template from string path with string substitution parameters in mapping called params\n    def render_str(self,template, **params):\n        template = jinja_environment.get_template(template)\n        return template.render(params)\n\n    #takes string template path and mapping of template paramters and renders them\n    def render(self, template, **kw):\n        self.write(self.render_str(template, **kw))\n\nclass FormHandler(BaseHandler):\n    #combines mapping of errors and fields into mapping called template_values. \n    #template_values is returned to be used as value of all fields for rendering\n    def createTemplate_values(self,errors,fields):\n        template_values= {'fields':fields,\n                         'errors':errors}\n        return template_values\n\n#Called by post method of form. Checks if input submitted in fields is proper and applicable\n#depends on validation functions in utils.py. If validation conditions needed to be adjusted, must edit validation functions\n#in utils.py\n    def validateFields(self):\n        validation = {'valid': True}\n        username = self.request.get('fields.username')\n        password = self.request.get('fields.password')\n        verifyPass = self.request.get('fields.verifyPass')\n        email = self.request.get('fields.email')      \n        fields = {'username':username,\n                  'password':password,\n                  'verifyPass':verifyPass,\n                  'email':email}\n        errors = {}\n        validation['fields']=fields              \n        \n        if not utils.valid_username(username):\n            validation['valid'] = False\n            errors['error_username'] = \"That's not a valid username\"\n            validation['errors'] = errors\n            return validation  \n    \n        if not utils.valid_password(password):\n            validation['valid'] = False\n            errors['error_password'] = \"That wasn't a valid password.\"\n            validation['errors'] = errors\n            return validation  \n\n        elif verifyPass != password:\n            validation['valid'] = False\n            errors['error_verify'] = \"Passwords do not match\"\n            validation['errors'] = errors\n            return validation  \n\n        if not utils.valid_email(email):\n            validation['valid'] = False\n            errors['error_email'] = \"That's not a valid email.\"\n            validation['errors'] = errors\n            return validation  \n\n            \n        validation['errors'] = errors\n        return validation  \n\n\n    #Check Users function is the generic database confirmation that the fields provived correspond to a certain user.\n    #Supposed to be called by the validate fields function and accepts the 'fields' mapping variable to check the database.\n    #Returns the mapping 'userSearch' contain 'User' account Model object for password verification \n    def validateUser(self,fields,password):\n        userSearch = {'userFound':False}\n        email = fields['email']\n        password = password\n        allUsers = user.User.all()\n        matchingUsers = allUsers.filter(\"email =\", email)\n        matchingUsers = matchingUsers.filter(\"password =\", password)\n        if matchingUsers.count() == 1:\n            userSearch = {'userFound':True,\n                          'user':matchingUsers.get()}\n        return userSearch        \n\nclass FrontPageHandler(BaseHandler):\n    def get(self):\n        self.render(\"/templates/index.html\")\n\nclass LoginHandler(FormHandler):\n    #ovewriting default validation method to check if login information is an actual account\n    #still need to check database on this.\n    def validateFields(self):\n        validation = {'valid': True}\n        email = self.request.get('fields.email')\n        password = self.request.get('fields.password')      \n        fields = {'email' : email}\n        errors = {}\n        validation['fields'] = fields              \n                      \n        if not utils.valid_email(email):\n            errors['error_email'] = \"That's not a valid email.\"\n            validation['valid'] = False\n            validation['errors'] = errors\n            return validation    \n            \n\n        if not utils.valid_password(password):\n            errors['error_password'] = \"That wasn't a valid password.\"\n            validation['valid'] = False\n            validation['errors'] = errors\n            return validation    \n\n        user = self.validateUser(fields,password)\n        if not user['userFound']:\n            errors['error_db'] = \"Invalid email/password\"\n            validation['valid'] = False\n            validation['errors'] = errors\n            return validation\n\n\n        validation['errors'] = errors\n        return validation \n\n    def get(self):\n        errors = {}\n        fields= {}\n        template_values = self.createTemplate_values(errors,fields)\n        self.render(\"/templates/login.html\",**template_values)\n\n    def post(self):\n        validation = self.validateFields()\n        if validation['valid'] == False:\n            template_values = self.createTemplate_values(validation['errors'], validation['fields'])\n            self.render(\"/templates/login.html\", **template_values)\n        else:\n            self.write(\"field validation is working\")\n\n\nclass RegisterHandler(FormHandler):\n\n#Ovewrites validateUser in form handler to check if email or username is currently used already in the database\n#if either email or username are taken,returns a mapping with user found true and the which match was made.\n    def validateUser(self,fields):\n        email = fields['email']\n        allUsers = user.User.all()\n        matchingUsers = allUsers.filter(\"email =\", email)\n        if matchingUsers.count() == 1:\n            userSearch = {'userFound':True,\n                          'user':matchingUsers.get()}\n        else:\n            userSearch = {'userFound':False}\n        return userSearch        \n\n#Ovewriting the validateFields method of formhandler to check database if this user is already registered\n    def validateFields(self):\n        validation = {'valid': True}\n        username = self.request.get('fields.username')\n        password = self.request.get('fields.password')\n        verifyPass = self.request.get('fields.verifyPass')\n        email = self.request.get('fields.email')      \n        fields = {'username':username,\n                  'password':password,\n                  'verifyPass':verifyPass,\n                  'email':email}\n        errors = {}\n        validation['fields']=fields              \n        user  = self.validateUser(fields)\n        if  user['userFound']:\n            validation['valid'] = False\n            errors['error_email'] = \"This email is already registered\"\n            validation['errors'] = errors\n            return validation\n\n\n        if not utils.valid_email(email):\n            validation['valid'] = False\n            errors['error_email'] = \"That's not a valid email.\"\n            validation['errors'] = errors\n            return validation  \n\n\n        if not utils.valid_username(username):\n            validation['valid'] = False\n            errors['error_username'] = \"That's not a valid username\"\n            validation['errors'] = errors\n            return validation  \n    \n        if not utils.valid_password(password):\n            validation['valid'] = False\n            errors['error_password'] = \"That wasn't a valid password.\"\n            validation['errors'] = errors\n            return validation  \n\n        elif verifyPass != password:\n            validation['valid'] = False\n            errors['error_verify'] = \"Passwords do not match\"\n            validation['errors'] = errors\n            return validation  \n\n            \n        validation['errors'] = errors\n        return validation  \n\n    def get(self):\n        errors = {}\n        fields = {}\n        template_values = self.createTemplate_values(errors,fields)\n        self.render(\"/templates/register.html\",**template_values)\n\n    def post(self):\n\n        validation = self.validateFields()\n        if validation['valid'] == False:\n            template_values = self.createTemplate_values(validation['errors'], validation['fields'])\n            self.render(\"/templates/register.html\",**template_values)\n        else:\n            username = validation['fields']['username']\n            password = validation['fields']['password']\n            email = validation['fields']['email']\n            newUser = user.User(username=username, password=password, email=email)\n            newUser.put()\n            self.write(\"Welcome %s\" %username)\n\n\n\napp = webapp2.WSGIApplication([('/', FrontPageHandler),\n                                ('/login', LoginHandler),\n                                ('/register', RegisterHandler)\n                                ], debug=True)\n\n",
			"file": "main.py",
			"file_size": 9945,
			"file_write_time": 130064948243004291,
			"settings":
			{
				"buffer_size": 9945,
				"line_ending": "Unix"
			}
		},
		{
			"file": "utils.py",
			"settings":
			{
				"buffer_size": 869,
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/register.html",
			"settings":
			{
				"buffer_size": 5844,
				"line_ending": "Windows"
			}
		},
		{
			"file": "templates/login.html",
			"settings":
			{
				"buffer_size": 5565,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Janyu/Documents/tasksapp/Standards",
		"/C/Users/Janyu/Documents/tasksapp/user.py",
		"/C/Users/Janyu/Documents/tasksapp/templates/login.html",
		"/C/Users/Janyu/Documents/tasksapp/templates/index.html",
		"/C/Users/Janyu/Documents/tasksapp/css/bootstrap.css",
		"/C/Users/Janyu/Documents/tasksapp/css/main.css",
		"/C/Users/Janyu/Documents/tasksapp/app.yaml",
		"/C/Users/Janyu/Documents/tasksapp/css/bootstrap-responsive.css",
		"/C/Users/Janyu/Documents/tasksapp/css/bootstrap.min.css",
		"/C/Users/Janyu/Documents/tasksapp/sample.py",
		"/C/Users/Janyu/Documents/tasksapp/templates/Snippets/logout button.html",
		"/C/Users/Janyu/Documents/tasksapp/docs/examples/signin.html",
		"/C/Users/Janyu/Documents/tasksapp/templates/signin.html",
		"/C/Users/Janyu/Documents/tasksapp/js/vendor/jquery-1.9.0.min.js",
		"/C/Users/Janyu/Documents/tasksapp/docs/examples/hero.html",
		"/C/Users/Janyu/Documents/tasksapp/js/vendor/bootstrap.js",
		"/C/Users/Janyu/Documents/tasksapp/js/main.js",
		"/C/Users/Janyu/Documents/tasksapp/docs/index.html",
		"/C/Users/Janyu/Documents/tasksapp/initializr/index.html",
		"/C/Users/Janyu/Documents/tasksapp/templates/frontpage.html",
		"/C/Users/Janyu/Documents/tasksapp/templates/frontpage2.html",
		"/C/Users/Janyu/Documents/tasksapp/index.yaml",
		"/C/Users/Janyu/Desktop/twitter-bootstrap-8c7f9c6/docs/getting-started.html",
		"/C/Users/Janyu/Desktop/twitter-bootstrap-8c7f9c6/less/hero-unit.less",
		"/C/Users/Janyu/Desktop/twitter-bootstrap-8c7f9c6/less/pager.less",
		"/C/Users/Janyu/Documents/tasksapp/templates/example.html",
		"/C/Users/Janyu/Documents/tasksapp/static/stylesheets/main.css",
		"/C/Users/Janyu/Desktop/twitter-bootstrap-8c7f9c6/less/mixins.less",
		"/C/Users/Janyu/Desktop/twitter-bootstrap-8c7f9c6/less/bootstrap.less",
		"/C/Users/Janyu/Desktop/twitter-bootstrap-8c7f9c6/less/variables.less",
		"/C/Users/Janyu/Documents/tasksapp/main.py",
		"/C/Users/Janyu/Documents/tasksapp/ma",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/jb-practice_project.sublime-project",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/templates/helloworld.html",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/templates/signup.html",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/templates/login.html",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/helloworld.py",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/cookieapp.py",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/blog.py",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/guestbook.py",
		"/C/Users/Janyu/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/app.yaml",
		"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/cookieapp",
		"/C/Users/Janyu/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Janyu/Desktop/test"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"userSearch",
			"script",
			"/*!",
			"input-b",
			"alert",
			"bloc",
			"block-level",
			"block",
			"inline",
			".form-signin",
			".form-sign",
			".form-",
			"signin",
			"sign",
			"signin",
			"form",
			".nav",
			".navcollapse",
			"MIN",
			"js",
			"login",
			"registration",
			"regForm",
			"make",
			"MAKE_HASH",
			"MAKE_SALT",
			"make_salt",
			"make_hash",
			"make_salt",
			"make_hash",
			"make_salt",
			"is digit"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"logForm",
			"regForm",
			"registration",
			"make_hash",
			"make_salt",
			"MAKE_SALT",
			"MAKE_HASH",
			"MAKE_SALT"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"settings":
					{
						"buffer_size": 9945,
						"regions":
						{
						},
						"selection":
						[
							[
								9718,
								9718
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3210.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "utils.py",
					"settings":
					{
						"buffer_size": 869,
						"regions":
						{
						},
						"selection":
						[
							[
								364,
								364
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "templates/register.html",
					"settings":
					{
						"buffer_size": 5844,
						"regions":
						{
						},
						"selection":
						[
							[
								4463,
								4463
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1950.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "templates/login.html",
					"settings":
					{
						"buffer_size": 5565,
						"regions":
						{
						},
						"selection":
						[
							[
								4932,
								4932
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 137.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"stand",
				"Standards"
			],
			[
				"standar",
				"Standards"
			],
			[
				"log",
				"templates/login.html"
			],
			[
				"sta",
				"Standards"
			],
			[
				"a",
				"app.yaml"
			],
			[
				"boot",
				"css/bootstrap-responsive.css"
			],
			[
				"main",
				"main.py"
			],
			[
				"ma",
				"main.py"
			],
			[
				"main.cs",
				"css/main.css"
			],
			[
				"boo",
				"css/bootstrap-responsive.css"
			],
			[
				"bo",
				"css/bootstrap.min.css"
			],
			[
				"mai",
				"main.py"
			],
			[
				"sign",
				"docs/examples/signin.html"
			],
			[
				"hero",
				"docs/examples/hero.html"
			],
			[
				"bootstra",
				"css/bootstrap.min.css"
			],
			[
				"boots",
				"css/bootstrap-responsive.css"
			],
			[
				"in",
				"docs/index.html"
			],
			[
				"ind",
				"templates/index.html"
			],
			[
				"inde",
				"initializr/index.html"
			],
			[
				"front",
				"templates/frontpage.html"
			],
			[
				"tempal",
				"templates/frontpage.html"
			],
			[
				"fr",
				"templates/frontpage.html"
			],
			[
				"ap",
				"app.yaml"
			],
			[
				"hellowol",
				"templates/helloworld.html"
			],
			[
				"sig",
				"templates/signup.html"
			],
			[
				"hel",
				"helloworld.py"
			],
			[
				"co",
				"cookieapp.py"
			],
			[
				"cook",
				"cookieapp"
			],
			[
				"cooki",
				"cookieapp"
			],
			[
				"gues",
				"guestbook.py"
			],
			[
				"",
				"blog.py"
			],
			[
				"hell",
				"helloworld.py"
			],
			[
				"blog",
				"blog.py"
			],
			[
				"hellw",
				"helloworld.py"
			],
			[
				"blo",
				"blog.py"
			],
			[
				"helloworld.py",
				"helloworld.py"
			],
			[
				"ci",
				"cookieapp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/C/Users/Janyu/todolist_capstone/tutorial/helloworld/jb-practice_project.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
